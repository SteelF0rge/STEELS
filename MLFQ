#include <iostream>
#include <vector>
#include <thread>
#include <chrono>
#include <fstream>
#include <sstream>

using namespace std;

class Process {
public:
	int pid;
	int burst_time; // execution time
	int priority;

	Process(int pid, int burst_time, int priority) {
		this->pid = pid;
		this->burst_time = burst_time;
		this->priority = priority;
	}
};

class MLFQ {
public:
	void schedule(vector<Process> processes) {
		int current_time = 0;
		int completed_processes = 0;

		while (completed_processes < processes.size()) {
			for (auto& process : processes) {
				if (process.burst_time > 0) {
					// Execute the process for the time quantum
					this_thread::sleep_for(chrono::seconds(2));
					process.burst_time -= 2;
					current_time += 2;

					// Check if the process is completed
					if (process.burst_time <= 0) {
						completed_processes++;
					}
				}
			}
		}

		cout << "Total execution time: " << current_time << " seconds" << endl;
	}

	float get_cpu_utilization() {
		ifstream file("/proc/loadavg");
		string line;
		getline(file, line);
		istringstream ss(line);
		float cpu_utilization;
		ss >> cpu_utilization;
		return cpu_utilization;
	}

	float get_memory_usage() {
		ifstream file("/proc/meminfo");
		string line;
		getline(file, line);
		istringstream ss(line);
		float memory_total, memory_free, memory_available;
		ss >> memory_total >> memory_free >> memory_available;
		return (memory_total - memory_available) / memory_total;
	}
};

int main() {
	// Define the processes
	vector<Process> processes = {
		Process(1, 10, 2),
		Process(2, 5, 1),
		Process(3, 8, 3),
		Process(4, 3, 2)
	};

	// Create an MLFQ object
	MLFQ mlfq;

	// Implement MLFQ scheduling
	mlfq.schedule(processes);

	// Get CPU utilization and memory usage
	float cpu_utilization = mlfq.get_cpu_utilization();
	float memory_usage = mlfq.get_memory_usage();

	cout << "CPU utilization: " << cpu_utilization * 100 << "%" << endl;
	cout << "Memory usage: " << memory_usage * 100 << "%" << endl;

	return 0;
}
